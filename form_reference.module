<?php
/**
 * @file
 * Form reference field.
 */

/**
 * Implements hook_field_info().
 *
 * Provides the description of the field.
 */
function form_reference_field_info() {
  $settings = form_reference_default_settings();
  $settings['Auto-discovery'] = array('modules' => array());
  $settings['Manual'] = array('custom' => array('custom' => ''));

  return array(
    'form_reference' => array(
      'label' => t('Form reference'),
      'description' => t('Load a referenced form.'),
      'default_widget' => 'options_select',
      'default_formatter' => 'form_reference_form',
      'settings' => $settings,
    ),
  );
}

/**
 * Returns default field settings for forms defined by hook_form_reference().
 *
 * @return array
 *   Array of default field settings.
 */
function form_reference_default_settings() {
  $forms = form_reference_form_references();
  $default_settings = array();
  foreach ($forms as $form) {
    $default_settings[$form['category']] = array($form['category'] => array());
  }

  return $default_settings;
}

/**
 * Implements hook_field_validate().
 *
 * @see form_reference_field_widget_error()
 */
function form_reference_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  foreach ($items as $delta => $item) {
    if ($entity == NULL && !empty($item['form_reference'])) {
      if (!form_reference_load_includes($item['form_reference'])) {
        $errors[$field['field_name']][$langcode][$delta][] = array(
          'error' => 'invalid_form',
          'message' => t('The form %form could not be found.', array('%form' => $item['form_reference'])),
        );
      }
    }
  }
}


/**
 * Implements hook_field_is_empty().
 */
function form_reference_field_is_empty($item, $field) {
  return empty($item['form_reference']);
}

/**
 * Implements hook_field_settings_form().
 */
function form_reference_field_settings_form($field, $instance, $has_data) {
  // Hook defined forms.
  $forms = form_reference_form_references();
  $form = array();
  foreach ($forms as $form_definition) {
    $category = isset($form_definition['category']) ? $form_definition['category'] :  NULL;
    $category_name = $category == NULL ? t('Other') : $category;
    if (!isset($form[$category])) {
      $form[$category_name] = array(
        '#type' => 'fieldset',
        '#title' => $category_name,
        '#description' => t('%category forms to be referenced.', array('%category' => $category)),
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
      );
    }
    $options = form_reference_form_options(
      form_reference_form_references(),
      $category
    );
    $form[$category_name][$category_name] = array(
      '#type' => 'checkboxes',
      '#title' => $category_name,
      '#options' => $options,
      '#default_value' => $field['settings'][$category_name][$category_name],
    );
  }

  // Auto-discovery.
  $optional_modules = form_reference_optional_modules();
  $module_links = array();
  foreach ($optional_modules as $module => $module_name) {
    $module_links[] = l($module_name, 'http://www.drupal.org/project/' . $module);
    // Do not present modules as options that aren't enabled.
    if (!module_exists($module)) {
      unset($optional_modules[$module]);
    }
  }
  $form['Auto-discovery'] = array(
    '#type' => 'fieldset',
    '#title' => t('Auto-discovery'),
    '#description' => t('Forms that extend a PHP base class can be auto-discovered:
    <br />') . implode(', ', $module_links),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['Auto-discovery']['modules'] = array(
    '#type' => 'checkboxes',
    '#options' => $optional_modules,
    '#default_value' => $field['settings']['Auto-discovery']['modules'],
  );

  // Manual entry.
  $form['Manual'] = array(
    '#type' => 'fieldset',
    '#title' => t('Manual'),
    '#description' => t('Manually specify forms that can be referenced.'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['Manual']['custom']['custom'] = array(
    '#type' => 'textarea',
    '#title' => t('Pre-defined'),
    '#description' => t(
      'Manually enter forms that can be referenced.<br />
      One form_id per line.<br />
      This is typically the parameter that is passed to drupal_get_form().'
    ),
    '#default_value' => $field['settings']['Manual']['custom']['custom'],
    '#element_validate' => array('form_reference_validate'),
  );

  return $form;
}

/**
 * Converts passed forms into select options.
 *
 * @param array $forms
 *   Array of forms. @see form_reference_core_forms().
 * @param string $category
 *   Optional category. Options will be limited to the category specified.
 *
 * @return array
 *   Returns options suitable for select form element.
 */
function form_reference_form_options(array $forms, $category = NULL) {
  $form_options = array();

  // Check the forms exist.
  foreach ($forms as $form_id => $form) {
    if (form_reference_load_include($form, $form_id)) {
      if ($category == NULL || $category == $form['category']) {
        $form_options[$form_id] = $form['name'];
      }
    }
  }

  return $form_options;
}

/**
 * Includes files needed to load the $form.
 *
 * @param array $form
 *   The form definition.
 * @param string $form_id
 *   The form_id.
 *
 * @return bool
 *   Whether the form can be loaded after including files.
 */
function form_reference_load_include(array $form, $form_id) {
  if (isset($form['file']) && isset($form['module'])) {
    $parts = explode('.', $form['file']);
    $type = array_pop($parts);
    module_load_include($type, $form['module'], implode('.', $parts));
  }
  // Check forms with a wrapper function can be loaded.
  if (isset($form['wrapper'])) {
    $loaded_form = call_user_func($form['wrapper'], $form_id);
    if (isset($loaded_form[$form['validation_element']])) {
      return TRUE;
    }
  }
  // Check normal forms - functions wrapped by drupal_get_form().
  if (function_exists($form_id)) {
    return TRUE;
  }

  return FALSE;
}

/**
 * Validation function for manually entered forms.
 *
 * @param array $element
 *   The element.
 * @param array $form_state
 *   The form_state.
 */
function form_reference_validate(array $element, array &$form_state) {
  $value = $element['#value'];
  if (!empty($value)) {
    // Check manually entered forms exist.
    $custom_forms = explode("\r\n", $value);
    $messages = array();
    $valid = TRUE;
    foreach ($custom_forms as $form) {
      // This won't work for class based forms but these should be
      // auto-discovered.
      if (!function_exists($form)) {
        $valid = FALSE;
        $messages[] = t(
          "The form %form could not be found.",
          array('%form' => $form)
        );
      }
    }
    if (!$valid) {
      form_error($element, check_plain(implode('<br />', $messages)));
    }
  }
}

/**
 * Implements hook_field_formatter_info().
 */
function form_reference_field_formatter_info() {
  return array(
    'form_reference_form' => array(
      'label' => t('Render form'),
      'field types' => array('form_reference'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function form_reference_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  switch ($display['type']) {
    case 'form_reference_form':
      foreach ($items as $delta => $item) {
        form_reference_load_includes($item['form_reference']);
        // Get form definition.
        $form_definition = form_reference_definition($item['form_reference']);
        if (isset($form_definition['wrapper'])) {
          $element[$delta] = call_user_func($form_definition['wrapper'], $item['form_reference']);
        }
        else {
          $element[$delta] = drupal_get_form($item['form_reference']);
        }
      }
      break;
  }

  return $element;
}

/**
 * Returns the form reference definition of a given form_id.
 *
 * @param string $form_id
 *   The form_id.
 *
 * @return array
 *   The form definition
 */
function form_reference_definition($form_id) {
  $forms = form_reference_form_references();

  return $forms[$form_id];
}

/**
 * Loads include files for a form.
 *
 * This gets information required for loading includes.
 *
 * @param string $form_id
 *   The form_id.
 *
 * @return bool
 *   Whether the form can successfully be loaded.
 */
function form_reference_load_includes($form_id) {
  $forms = form_reference_form_references();

  if (isset($forms[$form_id])) {
    return form_reference_load_include($forms[$form_id], $form_id);
  }
  else {
    // If it's an auto-discovered form we don't need to load includes.
    // Check that we can load the form.
    $optional_modules = form_reference_optional_modules('validation_element');
    foreach ($optional_modules as $validation_element) {
      $loaded_form = drupal_get_form($form_id);
      if (isset($loaded_form[$validation_element])) {
        return TRUE;
      }
    }
    return FALSE;
  }
}

/**
 * Implements hook_field_widget_info_alter().
 */
function form_reference_field_widget_info_alter(&$info) {
  if (module_exists('options')) {
    $info['options_select']['field types'][] = 'form_reference';
  }
}

/**
 * Implements hook_field_widget_error().
 */
function form_reference_field_widget_error($element, $error, $form, &$form_state) {
  switch ($error['error']) {
    case 'form_reference_invalid':
      form_error($element, $error['message']);
      break;
  }
}

/**
 * Implements hook_options_list().
 */
function form_reference_options_list($field, $instance = NULL, $entity_type = NULL, $entity = NULL) {
  // Content types.
  $settings = $field['settings'];
  $form_options = array();
  foreach ($settings as $category_key => $category) {
    if (is_array($category) && !empty($category)) {
      if (!in_array($category_key, array('Auto-discovery', 'Manual', 'Custom'))) {
        foreach ($category as $category_name => $category_forms) {
          foreach ($category_forms as $form => $value) {
            if (!$value) {
              unset($category[$category_name][$form]);
            }
          }
        }
        reset($category);
        if (key($category)) {
          $form_options[drupal_ucfirst($category_key)] = $category[key($category)];
        }
      }
    }
  }

  // Auto-discovery of optional modules.
  $optional_modules = form_reference_optional_modules('namespace');
  foreach ($settings['Auto-discovery']['modules'] as $parent_class) {
    if ($parent_class) {
      foreach (get_declared_classes() as $class) {
        if (is_subclass_of($class, $optional_modules[$parent_class])) {
          $form_options['Auto-discovery'][$class::getFormId()] = $class::getFormId();
        }
      }
    }
  }
  unset($form_options['auto_discovery']['modules']);

  // Custom forms.
  $custom_forms = explode("\r\n", $settings['Manual']['custom']['custom']);
  foreach ($custom_forms as $form) {
    if ($form) {
      $form_options['Custom'][$form] = $form;
    }
  }

  return $form_options;
}

/**
 * Returns optional modules for auto-discovery.
 *
 * @param string $return_value
 *   What element to return.
 *
 * @return string
 *   The element value.
 */
function form_reference_optional_modules($return_value = 'name') {
  $optional_modules = array(
    'cool' => array(
      'namespace' => 'Drupal\cool\BaseForm',
      'name' => 'Cool',
      // Existence of this element is checked in validation.
      'validation_element' => 'cool_class_name',
    ),
    /* Unfortunately ghost classes don't seem to be discoverable.
    'ghost' => array(
      'namespace' => 'Drupal\ghost\Form\BaseForm',
      'name' => 'Ghost',
    ),
    */
  );
  $return = array();
  foreach ($optional_modules as $module_key => $module) {
    $return[$module_key] = $module[$return_value];
  }

  return $return;
}

/**
 * Implements hook_form_reference().
 *
 * @see hook_form_reference()
 */
function form_reference_form_reference() {

  // Core forms.
  $forms = array(
    'user_login' => array(
      'name' => t('User Login'),
      'category' => t('Core'),
    ),
    'user_register_form' => array(
      'name' => t('Create user'),
      'category' => t('Core'),
    ),
    'contact_site_form' => array(
      'name' => t('Contact form'),
      'category' => t('Core'),
      'module' => 'contact',
      'file' => 'contact.pages.inc',
    ),
    'search_form' => array(
      'name' => t('Search form'),
      'category' => t('Core'),
    ),
  );

  // Add content types.
  foreach (node_type_get_types() as $content_type_id => $content_type) {
    $forms[$content_type_id] = array(
      'name' => $content_type->name,
      'category' => t('Content type'),
      'wrapper' => 'node_add',
      'module' => 'node',
      'file' => 'node.pages.inc',
      'validation_element' => '#node_edit_form',
    );
  }

  return $forms;
}

/**
 * Loads forms from other modules implementing hook_form_reference().
 */
function form_reference_form_references() {
  $forms = module_invoke_all('form_reference');
  // Add 'Other' category to forms that don't have a category.
  foreach ($forms as $form_id => $form) {
    if (!isset($form['category'])) {
      $forms[$form_id]['category'] = t('Other');
    }
  }

  return $forms;
}

/**
 * Implements hook_help().
 */
function form_reference_help($path, $arg) {
  switch ($path) {
    case 'admin/help#form_reference':
      $path = dirname(__FILE__) . '/README.md';
      $readme = file_get_contents($path);
      if (!isset($readme)) {
        return NULL;
      }
      if (module_exists('markdown')) {
        $filters = module_invoke('markdown', 'filter_info');
        $info = $filters['filter_markdown'];

        if (function_exists($info['process callback'])) {
          $function = $info['process callback'];
          $output = filter_xss_admin($function($readme, NULL));
        }
        else {
          $output = '<pre>' . check_plain($readme) . '</pre>';
        }
      }
      else {
        $output = '<pre>' . check_plain($readme) . '</pre>';
      }

      return $output;
  }
}
